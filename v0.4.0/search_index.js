var documenterSearchIndex = {"docs":
[{"location":"#ParameterHandling.jl","page":"Home","title":"ParameterHandling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ParameterHandling]","category":"page"},{"location":"#ParameterHandling.bounded-Tuple{Real, Real, Real}","page":"Home","title":"ParameterHandling.bounded","text":"bounded(val::Real, lower_bound::Real, upper_bound::Real)\n\nConstructs a Bounded. The value of a Bounded is a Real number that is constrained to be within the interval (lower_bound, upper_bound), and is equal to val. This is represented internally in terms of an unconstrained_value and a transform that maps any real to this interval.\n\n\n\n\n\n","category":"method"},{"location":"#ParameterHandling.deferred-Tuple{Any, Vararg{Any, N} where N}","page":"Home","title":"ParameterHandling.deferred","text":"deferred(f, args...)\n\nThe value of a deferred is f(value(args)...). This makes it possible to make the value of the args e.g. AbstractParameters and, therefore, enforce constraints on them even if f knows nothing about AbstractParameters.\n\nIt can be helpful to use deferred recursively when constructing complicated objects.\n\n\n\n\n\n","category":"method"},{"location":"#ParameterHandling.fixed-Tuple{Any}","page":"Home","title":"ParameterHandling.fixed","text":"fixed(val)\n\nRepresents a parameter whose value is required to stay constant. The value of a Fixed is simply val. Constantness of the parameter is enforced by returning an empty vector from flatten.\n\n\n\n\n\n","category":"method"},{"location":"#ParameterHandling.flatten","page":"Home","title":"ParameterHandling.flatten","text":"flatten([eltype=Float64], x)\n\nReturns a \"flattened\" representation of x as a vector of real numbers, and a function unflatten that takes a vector of reals of the same length and returns an object of the same type as x.\n\nunflatten is the inverse of flatten, so\n\njulia> x = (randn(5), 5.0, (a=5.0, b=randn(2, 3)));\n\njulia> v, unflatten = flatten(x);\n\njulia> x == unflatten(v)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#ParameterHandling.nearest_orthogonal_matrix-Tuple{StridedMatrix{var\"#s1\"} where var\"#s1\"<:Union{Real, Complex}}","page":"Home","title":"ParameterHandling.nearest_orthogonal_matrix","text":"nearest_orthogonal_matrix(X::StridedMatrix)\n\nProject X onto the closest orthogonal matrix in Frobenius norm.\n\nOriginally used in varz: https://github.com/wesselb/varz/blob/master/varz/vars.py#L446\n\n\n\n\n\n","category":"method"},{"location":"#ParameterHandling.orthogonal-Tuple{StridedMatrix{var\"#s2\"} where var\"#s2\"<:Real}","page":"Home","title":"ParameterHandling.orthogonal","text":"orthogonal(X::StridedMatrix{<:Real})\n\nProduce a parameter whose value is constrained to be an orthogonal matrix. The argument X need not be orthogonal.\n\nThis functionality projects X onto the nearest element subspace of orthogonal matrices (in Frobenius norm) and is overparametrised as a consequence.\n\nOriginally used in varz: https://github.com/wesselb/varz/blob/master/varz/vars.py#L446\n\n\n\n\n\n","category":"method"},{"location":"#ParameterHandling.positive","page":"Home","title":"ParameterHandling.positive","text":"positive(val::Real, transform=exp, ε=sqrt(eps(typeof(val))))\n\nReturns a Postive. The value of a Positive is a Real number that is constrained to be positive. This is represented in terms of an a transform that maps an unconstrained_value to the positive reals. Satisfies val ≈ transform(unconstrained_value)\n\n\n\n\n\n","category":"function"},{"location":"#ParameterHandling.positive_definite-Tuple{StridedMatrix{var\"#s3\"} where var\"#s3\"<:Real}","page":"Home","title":"ParameterHandling.positive_definite","text":"positive_definite(X::StridedMatrix{<:Real})\n\nProduce a parameter whose value is constrained to be a positive-definite matrix. The argument X needs to be a positive-definite matrix (see https://en.wikipedia.org/wiki/Definite_matrix).\n\nThe unconstrained parameter is a LowerTriangular matrix, stored as a vector.\n\n\n\n\n\n","category":"method"},{"location":"#ParameterHandling.value-Tuple{Any}","page":"Home","title":"ParameterHandling.value","text":"value(x)\n\nReturn the \"value\" of an object. For AbstractParameters this typically applies some transformation to some data contained in the parameter, and returns a plain data type. It might, for example, return a transformation of some internal data, the result of which is guaranteed to satisfy some contraint.\n\n\n\n\n\n","category":"method"},{"location":"#ParameterHandling.value_flatten-Tuple","page":"Home","title":"ParameterHandling.value_flatten","text":"value_flatten([eltype=Float64], x)\n\nOperates similarly to flatten, but the returned unflatten function returns an object like x, but with unwrapped values.\n\nDoing\n\nv, unflatten = value_flatten(x)\n\nis the same as doing\n\nv, _unflatten = flatten(x)\nunflatten = ParameterHandling.value ∘ _unflatten\n\n\n\n\n\n","category":"method"}]
}
